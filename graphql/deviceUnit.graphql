extend type Query {
    devicesRepared: [DeviceUnit!]
        @field(resolver: "DeviceUnitQueries@getDeviceUnits")
        @namespace(field: "App\\GraphQL\\Queries")
    deviceUnitsByVersionId(versionId: String!): [DeviceUnit]
        @field(resolver: "DeviceUnitQueries@getDeviceUnitsByVersionId")
        @namespace(field: "App\\GraphQL\\Queries")
    temporaryDeviceUnit(orderId: String!): TemporaryDeviceUnit
        @field(resolver: "DeviceUnitQueries@getTemporaryDeviceUnit")
        @namespace(field: "App\\GraphQL\\Queries")
    temporaryDeviceUnits(orderId: String!): [DeviceUnit]
        @field(resolver: "DeviceUnitQueries@getTemporaryDeviceUnits")
        @namespace(field: "App\\GraphQL\\Queries")
}

extend type Mutation {
    addDeviceUnit(deviceunit: DeviceUnitInput): DeviceUnit!
        @field(resolver: "DeviceUnitMutations@create")
        @namespace(field: "App\\GraphQL\\Mutations")
    updateDeviceUnit(deviceUnitId: String, deviceunit: DeviceUnitInput): Boolean
        @field(resolver: "DeviceUnitMutations@update")
        @namespace(field: "App\\GraphQL\\Mutations")
}

input DeviceUnitInput {
    serial: String! @rules(apply: ["required"])
    deviceversionid: String @rules(apply: ["nullable", "ulid", "exists:device_versions,id"])
    unlocktype: String! @rules(apply: ["required", "in:code,pattern,none"])
    unlockcode: String @rules(apply: ["required_if:unlocktype,code,unlocktype,pattern"])
}

type DeviceUnit {
    id: ID!
    serial: String!
    device_version_id: String!
    deviceVersion: DeviceVersion!
    unlock_type: String!
    unlock_code: String
    label: String
}

type TemporaryDeviceUnit {
    id: ID!
    serial: String
    device: Device
    deviceVersion: DeviceVersion
    device_unit_id: String
}

type DeviceVersion {
    id: ID!
    version: String!
    description: String
    device: Device!
}