union TemporaryDeviceUnitResult = TemporaryDeviceUnitPayload | ErrorPayload

extend type Query {
    deviceUnit(deviceUnitId: String!): DeviceUnit @first
    deviceUnitsByDeviceUnit(deviceUnitId: String!): [DeviceUnit]
        @field(resolver: "DeviceUnitQueries@getDeviceUnitsByDeviceUnit")
        @namespace(field: "App\\GraphQL\\Queries")
    deviceUnitsByVersionId(versionId: String!): [DeviceUnit]
        @field(resolver: "DeviceUnitQueries@getDeviceUnitsByVersionId")
        @namespace(field: "App\\GraphQL\\Queries")
    temporaryDeviceUnit(orderId: String!): TemporaryDeviceUnit
        @field(resolver: "DeviceUnitQueries@getTemporaryDeviceUnit")
        @namespace(field: "App\\GraphQL\\Queries")
    temporaryDeviceUnits(orderId: String!): [DeviceUnit]
        @field(resolver: "DeviceUnitQueries@getTemporaryDeviceUnits")
        @namespace(field: "App\\GraphQL\\Queries")
}

extend type Mutation {
    addDeviceUnit(deviceunit: DeviceUnitInput): DeviceUnit!
        @field(resolver: "DeviceUnitMutations@create")
        @namespace(field: "App\\GraphQL\\Mutations")
    updateDeviceUnit(deviceUnitId: String, deviceunit: DeviceUnitInput): Boolean
        @field(resolver: "DeviceUnitMutations@update")
        @namespace(field: "App\\GraphQL\\Mutations")
    addTemporaryDeviceUnit(input: TemporaryDeviceUnitInput): TemporaryDeviceUnitResult
        @field(resolver: "DeviceUnitMutations@createTemporaryDeviceUnit")
        @namespace(field: "App\\GraphQL\\Mutations")
    confirmDeviceUnit(input: ConfirmDeviceUnitInput!): Boolean
        @field(resolver: "DeviceUnitMutations@confirmDeviceUnit")
        @namespace(field: "App\\GraphQL\\Mutations")
}

input DeviceUnitInput {
    serial: String! @rules(apply: ["required"])
    deviceversionid: String @rules(apply: ["nullable", "ulid", "exists:device_versions,id"])
    unlocktype: String! @rules(apply: ["required", "in:code,pattern,none"])
    unlockcode: String @rules(apply: ["required_if:unlocktype,code,unlocktype,pattern"])
}

input ConfirmDeviceUnitInput {
  order: ID!
  brandid: ID!
  brandlabel: String!
  deviceid: ID!
  devicelabel: String!
  serialid: ID!
  seriallabel: String!
  typeid: ID!
  typelabel: String!
  url: String
  versionid: ID!
  versionlabel: String!
}

type DeviceUnit {
    id: ID!
    serial: String!
    device_version_id: String!
    deviceVersion: DeviceVersion!
    unlock_type: String!
    unlock_code: String
    label: String
}

type TemporaryDeviceUnit {
    id: ID!
    serial: String
    device: Device
    deviceVersion: DeviceVersion
    device_unit_id: String
}

type DeviceVersion {
    id: ID!
    version: String!
    description: String
    device: Device!
}

type TemporaryDeviceUnitPayload {
    temporarydeviceunit: ID!
    deviceid: ID!
    status: Boolean
    brand: Brand
    deviceType: DeviceType
    device: Device
}

input TemporaryDeviceUnitInput {
  deviceid: ID! @rules(apply: ["nullable", "ulid", "exists:devices,id"])

  brandid: ID @rules(apply: ["nullable", "ulid", "exists:brands,id"])
  brandlabel: String @rules(apply: ["nullable"])
  typeid: ID @rules(apply: ["nullable", "ulid", "exists:device_types,id"])
  typelabel: String @rules(apply: ["nullable"])
  commercialname: String! @rules(apply: ["required"])
  url: String @rules(apply: ["nullable", "url"])

  unlocktype: String! @rules(apply: ["required", "in:code,pattern,none"])
  unlockcode: String @rules(apply: ["required_if:unlocktype,code,unlocktype,pattern"])
  serialid: ID @rules(apply: ["nullable", "ulid"])
  seriallabel: String @rules(apply: ["nullable"])
  versionid: ID @rules(apply: ["nullable", "ulid", "exists:device_versions,id"])
  versionlabel: String @rules(apply: ["nullable"])
}
