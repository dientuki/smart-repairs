union AddOrderResult = AddOrderPayload | ErrorPayload
union UpdateOrderResult = UpdateOrderPayload | ErrorPayload
union AddPaymentResult = AddPaymentPayload | ErrorPayload

extend type Query {
    orders: [Orders!]!
        @field(resolver: "OrderQueries@getActiveOrders")
        @namespace(field: "App\\GraphQL\\Queries")
    order(id: ID @eq): Order! @find
}

extend type Mutation {
    addOrder(
        order: OrderInput,
        orderChecks: OrderChecks,
        tmpDeviceUnit: TmpDeviceUnit,
        money: Float,
        budgetItems: [BudgetItemInput!]! ): AddOrderResult!
        @field(resolver: "OrderMutations@create")
        @namespace(field: "App\\GraphQL\\Mutations")
    updateOrderStatus(id: String, status: String!): UpdateOrderResult!
        @field(resolver: "OrderMutations@updateStatus")
        @namespace(field: "App\\GraphQL\\Mutations")
    updateDiagnosis(id: String!, diagnosis: String! @rules(apply: ["max:200"])): Boolean!
        @field(resolver: "OrderMutations@updateDiagnosis")
        @namespace(field: "App\\GraphQL\\Mutations")
    updateObservation(id: String!, observation: String! @rules(apply: ["required"])): Boolean!
        @field(resolver: "OrderMutations@updateObservation")
        @namespace(field: "App\\GraphQL\\Mutations")
    addPayment(order: String!, amount: Float!): AddPaymentResult!
        @field(resolver: "OrderPaymentMutations@addPayment")
        @namespace(field: "App\\GraphQL\\Mutations")
}

input OrderInput {
    customer: String!
    observation: String!
}

type UpdateOrderPayload {
    success: Boolean!
}

type AddOrderPayload {
    success: Boolean!
    order: String!
}

type AddPaymentPayload {
    success: Boolean!
    amount: Float!
    created_at: DateTime!
}

input OrderChecks {
    damages: [DamageInput]
    damagesdescription: String
    features: [FeatureInput]
    featuresdescription: String
}

input TmpDeviceUnit {
    device: String!
    deviceversion: String
    deviceunit: String
    unlockcode: String
    unlocktype: String
    serial: String
}

input DamageInput {
    value: String!
    checked: Boolean!
}

input FeatureInput {
    value: String
    checked: Boolean
}

type Order {
    id: ID!
    status: String!,
    customer: Customer!
    device: Device!
    deviceUnit: DeviceUnit
    created_at: DateTime!
    observation: String!
    comments: [OrderComment!]
    creator: User!
    assignee: User
    hasBudget: Boolean!
    diagnosis: String
    orderCheck: OrderCheck
    payments: [Payment!]
    budget: Budget
}

type Payment {
    amount: Float!
    created_at: DateTime!
}

type Orders {
    id: ID!
    team_id: ID!
    status: String!,
    customer: Customer!
    device: Device!
    deviceUnit: DeviceUnit
    created_at: DateTime!
    observation: String!
    comments: [OrderComment!]
}